"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[239],{16239:(h,i,e)=>{e.r(i),e.d(i,{SocketModule:()=>b});var c=e(52787),l=e(9915),m=e(93285),o=e(65879),d=e(28749);const p=[{path:"",component:m.S,children:[{path:"",redirectTo:"getting-started/zh",pathMatch:"full"},{path:"getting-started",redirectTo:"getting-started/zh",pathMatch:"full"},{path:"getting-started/:lang",component:(()=>{class n{constructor(){this.item={cols:1,urls:{"en-US":"packages/socket/docs/getting-started.en-US.md","zh-CN":"packages/socket/docs/getting-started.zh-CN.md"},content:{"en-US":{content:"<section class=\"markdown\"><h1 id=\"env\">env</h1><pre class=\"hljs language-ts\"><code>import { YelonMockModule } from '@yelon/mock';\nimport { Environment } from '@yelon/theme';\n\nimport * as MOCKDATA from '../../_mock';\n\nconst form: FormData = new FormData();\nform.set('username', 'cuihaonan');\nform.set('password', 'com.apache.log4j');\nform.set('grant_type', 'password');\nform.set('client_id', 'webapp');\nform.set('scope', 'webapp');\nform.set('client_secret', '123456');\n\nexport const environment = {\n  production: false,\n  useHash: true,\n  api: {\n    ...\n    socket: {\n      connectHeaders: {\n        login: 'guest',\n        passcode: 'guest'\n      },\n      brokerURL: 'ws://222.30.194.61:15674/ws',\n      heartbeatIncoming: 1000 * 60,\n      heartbeatOutgoing: 1000 * 60,\n      reconnectDelay: 30000000\n    }\n    ...\n  },\n  modules: [YelonMockModule.forRoot({ data: MOCKDATA })]\n} as Environment;</code></pre><h1 id=\"config\">config</h1><p>global-config.module.ts</p><pre class=\"hljs language-ts\"><code>const yunzaiConfig: YunzaiConfig = {\n  ...\n  socket: { ...environment.api['socket'] },\n  ...\n};</code></pre><h1 id=\"api\">api</h1><pre class=\"hljs language-ts\"><code>export declare class RxStompConfig {\n    /**\n     * The URL for the STOMP broker to connect to.\n     * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n     *\n     * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n     * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n     *\n     * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n     */\n    brokerURL?: string;\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.0 and 1.1\n     *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n     * ```\n     *\n     * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n     */\n    stompVersions?: Versions;\n    /**\n     * Set it to log the actual raw communication with the broker.\n     * When unset, it logs headers of the parsed frames.\n     *\n     * Change in this effects from next broker reconnect.\n     *\n     * **Caution: this assumes that frames only have valid UTF8 strings.**\n     *\n     * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n     */\n    logRawCommunication?: boolean;\n    /** Enable client debugging? */\n    debug?: debugFnType;\n    /**\n     * This function should return a WebSocket or a similar (e.g. SockJS) object.\n     * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n     *\n     * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n     *\n     * Example:\n     * ```javascript\n     *        // use a WebSocket\n     *        rxStompConfig.webSocketFactory= function () {\n     *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n     *        };\n     *\n     *        // Typical usage with SockJS\n     *        rxStompConfig.webSocketFactory= function () {\n     *          return new SockJS(\"http://broker.329broker.com/stomp\");\n     *        };\n     * ```\n     *\n     * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n     */\n    webSocketFactory?: () => any;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which implies wait for ever.\n     *\n     * Maps to: [Client#connectionTimeout]{@link Client#connectionTimeout}.\n     */\n    connectionTimeout?: number;\n    /**\n     * Automatically reconnect with delay in milliseconds, set to 0 to disable.\n     *\n     * Maps to: [Client#reconnectDelay]{@link Client#reconnectDelay}\n     */\n    reconnectDelay?: number;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     *\n     * Maps to: [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     */\n    heartbeatIncoming?: number;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     *\n     * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n     */\n    heartbeatOutgoing?: number;\n    /**\n     * Enable non-standards compliant mode of splitting of outgoing large text packets.\n     * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n     * Useful with Java Spring based brokers.\n     *\n     * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n     */\n    splitLargeFrames?: boolean;\n    /**\n     * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n     */\n    forceBinaryWSFrames?: boolean;\n    /**\n     * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n     */\n    appendMissingNULLonIncoming?: boolean;\n    /**\n     * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     */\n    maxWebSocketChunkSize?: number;\n    /**\n     * Maps to: [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n     */\n    discardWebsocketOnCommFailure?: boolean;\n    /**\n     * Connection headers, important keys - `login`, `passcode`, `host`.\n     * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n     * details specific to your broker.\n     *\n     * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n     */\n    connectHeaders?: StompHeaders;\n    /**\n     * Disconnection headers.\n     *\n     * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     */\n    disconnectHeaders?: StompHeaders;\n    /**\n     * Callback, invoked on before a connection connection to the STOMP broker.\n     *\n     * You can change configuration of the rxStomp, which will impact the immediate connect.\n     * It is valid to call [RxStomp#deactivate]{@link RxStomp#deactivate} in this callback.\n     *\n     * As of version 0.1.1, this callback can be\n     * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n     * (i.e., it can return a\n     * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n     * In that case connect will be called only after the Promise is resolved.\n     * This can be used to reliably fetch credentials, access token etc. from some other service\n     * in an asynchronous way.\n     *\n     * As of 0.3.5, this callback will receive [RxStomp]{@link RxStomp} as parameter.\n     *\n     * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n     */\n    beforeConnect?: (client: RxStomp) => void | Promise<void>;\n    /**\n     * Callback invoked on every ERROR frame. If the callback returns the ID of a currently\n     * subscribed destination, the frame will be emitted as an error on the corresponding\n     * observable(s), terminating them.\n     *\n     * Importantly, since those observables are now closed, this means a re-SUBSCRIBE to\n     * the erroneous destination will _not_ be attempted during an automatic reconnection of\n     * the websocket.\n     */\n    correlateErrors?: (error: IFrame) => string;\n}</co</section>",meta:{order:1,title:"Getting Started",type:"Documents"},toc:[{id:"env",title:"env",h:1},{id:"config",title:"config",h:1},{id:"api",title:"api",h:1}]},"zh-CN":{content:"<section class=\"markdown\"><h1 id=\"env\">env</h1><pre class=\"hljs language-ts\"><code>import { YelonMockModule } from '@yelon/mock';\nimport { Environment } from '@yelon/theme';\n\nimport * as MOCKDATA from '../../_mock';\n\nconst form: FormData = new FormData();\nform.set('username', 'cuihaonan');\nform.set('password', 'com.apache.log4j');\nform.set('grant_type', 'password');\nform.set('client_id', 'webapp');\nform.set('scope', 'webapp');\nform.set('client_secret', '123456');\n\nexport const environment = {\n  production: false,\n  useHash: true,\n  api: {\n    ...\n    socket: {\n      connectHeaders: {\n        login: 'guest',\n        passcode: 'guest'\n      },\n      brokerURL: 'ws://222.30.194.61:15674/ws',\n      heartbeatIncoming: 1000 * 60,\n      heartbeatOutgoing: 1000 * 60,\n      reconnectDelay: 30000000\n    }\n    ...\n  },\n  modules: [YelonMockModule.forRoot({ data: MOCKDATA })]\n} as Environment;</code></pre><h1 id=\"config\">config</h1><p>global-config.module.ts</p><pre class=\"hljs language-ts\"><code>const yunzaiConfig: YunzaiConfig = {\n  ...\n  socket: { ...environment.api['socket'] },\n  ...\n};</code></pre><h1 id=\"api\">api</h1><pre class=\"hljs language-ts\"><code>export declare class RxStompConfig {\n    /**\n     * The URL for the STOMP broker to connect to.\n     * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n     *\n     * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n     * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n     *\n     * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n     */\n    brokerURL?: string;\n    /**\n     * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n     *\n     * Example:\n     * ```javascript\n     *        // Try only versions 1.0 and 1.1\n     *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n     * ```\n     *\n     * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n     */\n    stompVersions?: Versions;\n    /**\n     * Set it to log the actual raw communication with the broker.\n     * When unset, it logs headers of the parsed frames.\n     *\n     * Change in this effects from next broker reconnect.\n     *\n     * **Caution: this assumes that frames only have valid UTF8 strings.**\n     *\n     * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n     */\n    logRawCommunication?: boolean;\n    /** Enable client debugging? */\n    debug?: debugFnType;\n    /**\n     * This function should return a WebSocket or a similar (e.g. SockJS) object.\n     * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n     *\n     * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n     *\n     * Example:\n     * ```javascript\n     *        // use a WebSocket\n     *        rxStompConfig.webSocketFactory= function () {\n     *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n     *        };\n     *\n     *        // Typical usage with SockJS\n     *        rxStompConfig.webSocketFactory= function () {\n     *          return new SockJS(\"http://broker.329broker.com/stomp\");\n     *        };\n     * ```\n     *\n     * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n     */\n    webSocketFactory?: () => any;\n    /**\n     * Will retry if Stomp connection is not established in specified milliseconds.\n     * Default 0, which implies wait for ever.\n     *\n     * Maps to: [Client#connectionTimeout]{@link Client#connectionTimeout}.\n     */\n    connectionTimeout?: number;\n    /**\n     * Automatically reconnect with delay in milliseconds, set to 0 to disable.\n     *\n     * Maps to: [Client#reconnectDelay]{@link Client#reconnectDelay}\n     */\n    reconnectDelay?: number;\n    /**\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n     *\n     * Maps to: [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     */\n    heartbeatIncoming?: number;\n    /**\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n     *\n     * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n     */\n    heartbeatOutgoing?: number;\n    /**\n     * Enable non-standards compliant mode of splitting of outgoing large text packets.\n     * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n     * Useful with Java Spring based brokers.\n     *\n     * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n     */\n    splitLargeFrames?: boolean;\n    /**\n     * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n     */\n    forceBinaryWSFrames?: boolean;\n    /**\n     * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n     */\n    appendMissingNULLonIncoming?: boolean;\n    /**\n     * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n     */\n    maxWebSocketChunkSize?: number;\n    /**\n     * Maps to: [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n     */\n    discardWebsocketOnCommFailure?: boolean;\n    /**\n     * Connection headers, important keys - `login`, `passcode`, `host`.\n     * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n     * details specific to your broker.\n     *\n     * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n     */\n    connectHeaders?: StompHeaders;\n    /**\n     * Disconnection headers.\n     *\n     * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     */\n    disconnectHeaders?: StompHeaders;\n    /**\n     * Callback, invoked on before a connection connection to the STOMP broker.\n     *\n     * You can change configuration of the rxStomp, which will impact the immediate connect.\n     * It is valid to call [RxStomp#deactivate]{@link RxStomp#deactivate} in this callback.\n     *\n     * As of version 0.1.1, this callback can be\n     * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n     * (i.e., it can return a\n     * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n     * In that case connect will be called only after the Promise is resolved.\n     * This can be used to reliably fetch credentials, access token etc. from some other service\n     * in an asynchronous way.\n     *\n     * As of 0.3.5, this callback will receive [RxStomp]{@link RxStomp} as parameter.\n     *\n     * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n     */\n    beforeConnect?: (client: RxStomp) => void | Promise<void>;\n    /**\n     * Callback invoked on every ERROR frame. If the callback returns the ID of a currently\n     * subscribed destination, the frame will be emitted as an error on the corresponding\n     * observable(s), terminating them.\n     *\n     * Importantly, since those observables are now closed, this means a re-SUBSCRIBE to\n     * the erroneous destination will _not_ be attempted during an automatic reconnection of\n     * the websocket.\n     */\n    correlateErrors?: (error: IFrame) => string;\n}</co</section>",meta:{order:1,title:"\u5f00\u59cb\u4f7f\u7528",type:"Documents"},toc:[{id:"env",title:"env",h:1},{id:"config",title:"config",h:1},{id:"api",title:"api",h:1}]}},demo:!1},this.codes=[]}static#n=this.\u0275fac=function(t){return new(t||n)};static#e=this.\u0275cmp=o.Xpm({type:n,selectors:[["app-socket-getting-started"]],decls:1,vars:2,consts:[[3,"codes","item"]],template:function(t,r){1&t&&o._UZ(0,"app-docs",0),2&t&&o.Q6J("codes",r.codes)("item",r.item)},dependencies:[d.P],styles:["[_nghost-%COMP%]{display:block}"]})}return n})()}]}];let b=(()=>{class n{static#n=this.\u0275fac=function(t){return new(t||n)};static#e=this.\u0275mod=o.oAB({type:n});static#t=this.\u0275inj=o.cJS({imports:[l.m,c.Bz.forChild(p)]})}return n})()}}]);